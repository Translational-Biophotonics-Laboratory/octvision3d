import nrrd
import os
import re
import argparse
import numpy as np
import tifffile as tif
from tqdm import tqdm
from glob import glob
from collections import OrderedDict

def add_segmentation_to_header(nrrd_file_path, new_segment_name, new_segment_color):
    """
    Adds a new segmentation entry to the NRRD file header.

    :param nrrd_file_path: Path to the NRRD file.
    :param new_segment_id: The ID for the new segment.
    :param new_segment_name: The name for the new segment.
    :param new_segment_color: The color for the new segment in the format 'R G B'.
    """
    # Load the NRRD file
    data, header = nrrd.read(nrrd_file_path)

    if new_segment_name in set([i for i in header.values() if type(i)==str]):
        raise ValueError("Segment name {new_segment_name} already in {nrrd_file_path}")

    new_data = np.append(data, np.zeros([1] + list(data.shape[1:]), dtype=data.dtype), axis=0)

    # Add new segmentation information to the header
    pattern = re.compile("^Segment\d+")

    copied_odict = OrderedDict()
    for key, value in header.items():
        if key == "sizes":
            copied_odict[key] = new_data.shape
            continue
        if key == "Segmentation_ContainedRepresentationNames":
            segment_count = len(set([key.split("_")[0] for key in header.keys() if re.match(pattern, key)]))
            new_segment_id = f"Segment_{segment_count+1}"
            copied_odict[f'Segment{segment_count}_Color'] = new_segment_color
            copied_odict[f'Segment{segment_count}_ColorAutoGenerated'] = '0'  # Assuming color is manually set
            copied_odict[f'Segment{segment_count}_Extent'] = '0 -1 -167 -168 0 -1'
            copied_odict[f'Segment{segment_count}_ID'] = new_segment_id
            copied_odict[f'Segment{segment_count}_Name'] = new_segment_name
            copied_odict[f'Segment{segment_count}_NameAutoGenerated'] = '0'  # Assuming color is manually set
            copied_odict[f'Segment{segment_count}_Tags'] = "TerminologyEntry:Segmentation category and type - 3D Slicer General Anatomy list~SRT^T-D0050^Tissue~SRT^T-D0050^Tissue~^^~Anatomic codes - DICOM master list~^^~^^|"

        copied_odict[key] = value


    # Save the NRRD file with the updated header
    nrrd.write(nrrd_file_path, new_data, copied_odict)

def get_file_paths(path, ext):
    return sorted(glob(f"{path}/*.{ext}"))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--path",
        type=str,
        required=True,
        help="Path to .seg.nrrd files to add new segments to"
    )
    FLAGS, _ = parser.parse_known_args()

    cmap = OrderedDict([
        ("RET", "0.635 0.0 1.0"),
        ("CHO", "0.56 0.56 0.44"),
        ("VIT", "0.88 0.94 0.99"),
        ("HYA", "0.46 0.98 0.99"),
        ("SHS", "0.69 0.99 0.82"),
        ("ART", "0.99 0.99 0.33"),
        ("ERM", "0.22 0.49 0.97"),
    ])
    for f in tqdm(get_file_paths(FLAGS.path, "seg.nrrd")):
        for k, v in cmap.items():
            add_segmentation_to_header(f, k, v)

